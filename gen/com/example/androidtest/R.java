/* AUTO-GENERATED FILE.  DO NOT MODIFY.
 *
 * This class was automatically generated by the
 * aapt tool from the resource data it found.  It
 * should not be modified by hand.
 */

package com.example.androidtest;

public final class R {
    public static final class anim {
        public static final int fade_animation=0x7f040000;
        public static final int slide_in_bottom=0x7f040001;
        public static final int slide_in_left=0x7f040002;
        public static final int slide_in_right=0x7f040003;
        public static final int slide_in_top=0x7f040004;
        public static final int slide_out_bottom=0x7f040005;
        public static final int slide_out_left=0x7f040006;
        public static final int slide_out_right=0x7f040007;
        public static final int slide_out_top=0x7f040008;
    }
    public static final class array {
        public static final int saNoOfMatches=0x7f090000;
    }
    public static final class attr {
        /**  Indicates that this list will always be drawn on top of solid, single-color
             opaque background. This allows the list to optimize drawing. 
         <p>Must be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public static final int cacheColorHint=0x7f010007;
        /** <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public static final int columnWidth=0x7f01000e;
        /**  When set to true, the selector will be drawn over the selected item.
             Otherwise the selector is drawn behind the selected item. The default
             value is false. 
         <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public static final int drawSelectorOnTop=0x7f010003;
        /**  Specifies how to place the content of an object, both
         on the x- and y-axis, within the object itself. 
         <p>Must be one or more (separated by '|') of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>top</code></td><td>0x30</td><td> Push object to the top of its container, not changing its size. </td></tr>
<tr><td><code>bottom</code></td><td>0x50</td><td> Push object to the bottom of its container, not changing its size. </td></tr>
<tr><td><code>left</code></td><td>0x03</td><td> Push object to the left of its container, not changing its size. </td></tr>
<tr><td><code>right</code></td><td>0x05</td><td> Push object to the right of its container, not changing its size. </td></tr>
<tr><td><code>center_vertical</code></td><td>0x10</td><td> Place object in the vertical center of its container, not changing its size. </td></tr>
<tr><td><code>fill_vertical</code></td><td>0x70</td><td> Grow the vertical size of the object if needed so it completely fills its container. </td></tr>
<tr><td><code>center_horizontal</code></td><td>0x01</td><td> Place object in the horizontal center of its container, not changing its size. </td></tr>
<tr><td><code>fill_horizontal</code></td><td>0x07</td><td> Grow the horizontal size of the object if needed so it completely fills its container. </td></tr>
<tr><td><code>center</code></td><td>0x11</td><td> Place the object in the center of its container in both the vertical and horizontal axis, not changing its size. </td></tr>
<tr><td><code>fill</code></td><td>0x77</td><td> Grow the horizontal and vertical size of the object if needed so it completely fills its container. </td></tr>
<tr><td><code>clip_vertical</code></td><td>0x80</td><td> Additional option that can be set to have the top and/or bottom edges of
             the child clipped to its container's bounds.
             The clip will be based on the vertical gravity: a top gravity will clip the bottom
             edge, a bottom gravity will clip the top edge, and neither will clip both edges. </td></tr>
<tr><td><code>clip_horizontal</code></td><td>0x08</td><td> Additional option that can be set to have the left and/or right edges of
             the child clipped to its container's bounds.
             The clip will be based on the horizontal gravity: a left gravity will clip the right
             edge, a right gravity will clip the left edge, and neither will clip both edges. </td></tr>
</table>
         */
        public static final int gravity=0x7f010000;
        /**  Default GridView style. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public static final int gridViewStyle=0x7f010001;
        /** <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public static final int horizontalSpacing=0x7f01000b;
        /**  Drawable used to indicate the currently selected item in the list. 
         <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
<p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
         */
        public static final int listSelector=0x7f010002;
        /** <p>May be an integer value, such as "<code>100</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
<p>May be one of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>auto_fit</code></td><td>-1</td><td></td></tr>
</table>
         */
        public static final int numColumns=0x7f010010;
        /** <p>May be an integer value, such as "<code>100</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
<p>May be one of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>auto_fit</code></td><td>-1</td><td></td></tr>
</table>
         */
        public static final int numRows=0x7f010011;
        /** <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public static final int rowHeight=0x7f01000f;
        /** <p>Must be one of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>vertical</code></td><td>0</td><td> Scroll up vertically. This is the default value. </td></tr>
<tr><td><code>horizontal</code></td><td>1</td><td> Scroll horizontally. </td></tr>
</table>
         */
        public static final int scrollDirectionLandscape=0x7f01000a;
        /**  Use this attribute to control which direction the GridView scrolls when in
             portrait orientation 
         <p>Must be one of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>vertical</code></td><td>0</td><td> Scroll up vertically. This is the default value. </td></tr>
<tr><td><code>horizontal</code></td><td>1</td><td> Scroll horizontally. </td></tr>
</table>
         */
        public static final int scrollDirectionPortrait=0x7f010009;
        /**  When set to true, the list uses a drawing cache during scrolling.
             This makes the rendering faster but uses more memory. The default
             value is true. 
         <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public static final int scrollingCache=0x7f010005;
        /**  Enables the fast scroll thumb that can be dragged to quickly scroll through
             the list. 
 <attr name="fastScrollEnabled" format="boolean" /> 
 When set to true, the list will use a more refined calculation
             method based on the pixels height of the items visible on screen. This
             property is set to true by default but should be set to false if your adapter
             will display items of varying heights. When this property is set to true and
             your adapter displays items of varying heights, the scrollbar thumb will
             change size as the user scrolls through the list. When set to fale, the list
             will use only the number of items in the adapter and the number of items visible
             on screen to determine the scrollbar's properties. 
         <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public static final int smoothScrollbar=0x7f010008;
        /**  Used by ListView and GridView to stack their content from the bottom. 
         <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public static final int stackFromBottom=0x7f010004;
        /** <p>Must be one of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>none</code></td><td>0</td><td></td></tr>
<tr><td><code>spacingWidth</code></td><td>1</td><td></td></tr>
<tr><td><code>columnWidth</code></td><td>2</td><td></td></tr>
<tr><td><code>spacingWidthUniform</code></td><td>3</td><td></td></tr>
</table>
         */
        public static final int stretchMode=0x7f01000d;
        /**  When set to true, the list will filter results as the user types. The
             List's adapter must support the Filterable interface for this to work. 
 <attr name="textFilterEnabled" format="boolean" /> 
 Sets the transcript mode for the list. In transcript mode, the list
             scrolls to the bottom to make new items visible when they are added. 
         <p>Must be one of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>disabled</code></td><td>0</td><td> Disables transcript mode. This is the default value. </td></tr>
<tr><td><code>normal</code></td><td>1</td><td> The list will automatically scroll to the bottom when
                 a data set change notification is received and only if the last item is
                 already visible on screen. </td></tr>
<tr><td><code>alwaysScroll</code></td><td>2</td><td> The list will automatically scroll to the bottom, no matter what items
                 are currently visible. </td></tr>
</table>
         */
        public static final int transcriptMode=0x7f010006;
        /** <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public static final int verticalSpacing=0x7f01000c;
    }
    public static final class bool {
        public static final int has_two_panes=0x7f070000;
    }
    public static final class dimen {
        public static final int padding_large=0x7f060002;
        public static final int padding_medium=0x7f060001;
        public static final int padding_small=0x7f060000;
    }
    public static final class drawable {
        public static final int button_normal=0x7f020000;
        public static final int button_pressed=0x7f020001;
        public static final int custom_transition_shape=0x7f020002;
        public static final int ic_action_search=0x7f020003;
        public static final int ic_launcher=0x7f020004;
        public static final int image=0x7f020005;
        public static final int line_divider=0x7f020006;
        public static final int login_btn=0x7f020007;
        public static final int login_normal=0x7f020008;
        public static final int login_on_click=0x7f020009;
        public static final int login_on_mouse_over=0x7f02000a;
        public static final int logo=0x7f02000b;
        public static final int newsreader_button_bg=0x7f02000c;
        public static final int newsreader_tab_bg=0x7f02000d;
        public static final int overscroll_edge=0x7f02000e;
        public static final int overscroll_glow=0x7f02000f;
        public static final int progress_bg=0x7f020010;
        public static final int sign_btn=0x7f020011;
        public static final int signup_normal=0x7f020012;
        public static final int signup_on_click=0x7f020013;
        public static final int signup_on_mouse_over=0x7f020014;
        public static final int spinner_black_76=0x7f020015;
        public static final int tab_bg_normal=0x7f020016;
        public static final int tab_bg_selected=0x7f020017;
    }
    public static final class id {
        public static final int Button01=0x7f050036;
        public static final int Button01main=0x7f050031;
        public static final int Button02main=0x7f050032;
        public static final int Button03main=0x7f050033;
        public static final int Button04main=0x7f050034;
        public static final int ImageView01=0x7f050035;
        public static final int PopupTextView01=0x7f050021;
        public static final int RelativeLayout01=0x7f05002f;
        public static final int ScrollView01=0x7f050020;
        public static final int TextView01=0x7f050030;
        public static final int alwaysScroll=0x7f05000e;
        public static final int amortization=0x7f050038;
        public static final int article=0x7f050037;
        public static final int auto_fit=0x7f050015;
        public static final int bottom=0x7f050001;
        public static final int btSpeak=0x7f050019;
        public static final int button1=0x7f050022;
        public static final int categorybutton=0x7f050029;
        public static final int center=0x7f050008;
        public static final int center_horizontal=0x7f050006;
        public static final int center_vertical=0x7f050004;
        public static final int clip_horizontal=0x7f05000b;
        public static final int clip_vertical=0x7f05000a;
        public static final int close=0x7f05001f;
        public static final int columnWidth=0x7f050013;
        public static final int disabled=0x7f05000c;
        public static final int enter=0x7f05002d;
        public static final int etTextHint=0x7f050018;
        public static final int fill=0x7f050009;
        public static final int fill_horizontal=0x7f050007;
        public static final int fill_vertical=0x7f050005;
        public static final int gridview=0x7f05003b;
        public static final int hScroll=0x7f05002b;
        public static final int headlines=0x7f050025;
        public static final int horizontal=0x7f050010;
        public static final int image=0x7f050023;
        public static final int image01=0x7f050039;
        public static final int imageView1=0x7f050027;
        public static final int intro=0x7f05002c;
        public static final int left=0x7f050002;
        public static final int linearLayout1=0x7f050026;
        public static final int list=0x7f050017;
        public static final int loginBtn=0x7f05001c;
        public static final int lvTextMatches=0x7f05001b;
        public static final int menu01=0x7f050016;
        public static final int menu_settings=0x7f05003d;
        public static final int none=0x7f050011;
        public static final int normal=0x7f05000d;
        public static final int right=0x7f050003;
        public static final int sNoOfMatches=0x7f05001a;
        public static final int signBtn=0x7f05001d;
        public static final int spacingWidth=0x7f050012;
        public static final int spacingWidthUniform=0x7f050014;
        public static final int speak=0x7f05002e;
        public static final int text=0x7f050024;
        public static final int title=0x7f05001e;
        public static final int top=0x7f050000;
        public static final int tvUUID=0x7f05003c;
        public static final int twoscroll_container=0x7f05003a;
        public static final int vScroll=0x7f05002a;
        public static final int vertical=0x7f05000f;
        public static final int view1=0x7f050028;
    }
    public static final class layout {
        public static final int actionbar_list_item=0x7f030000;
        public static final int activity_main=0x7f030001;
        public static final int activity_voice_recognition=0x7f030002;
        public static final int button_main=0x7f030003;
        public static final int cchatpopup=0x7f030004;
        public static final int cchatpopup_scroll=0x7f030005;
        public static final int custom_transition_main=0x7f030006;
        public static final int custom_transition_second=0x7f030007;
        public static final int custom_transition_third=0x7f030008;
        public static final int dialog_shape=0x7f030009;
        public static final int headline_item=0x7f03000a;
        public static final int horizontaldivider=0x7f03000b;
        public static final int horizontalview1=0x7f03000c;
        public static final int main_layout=0x7f03001b;
        public static final int onepane=0x7f03000d;
        public static final int onepane_with_bar=0x7f03000e;
        public static final int scrollable_main=0x7f03000f;
        public static final int scrolltest01_main=0x7f030010;
        public static final int speaking_main=0x7f030011;
        public static final int terms_main=0x7f030012;
        public static final int terms_main_dialog=0x7f030013;
        public static final int terms_main_dialog_shape=0x7f030014;
        public static final int twopanes=0x7f030015;
        public static final int twopanes_narrow=0x7f030016;
        public static final int twoscroll02_design=0x7f030017;
        public static final int twoscroll_design=0x7f030018;
        public static final int twowaygrid_main=0x7f030019;
        public static final int uuid_main=0x7f03001a;
    }
    public static final class menu {
        public static final int activity_main=0x7f0b0000;
        public static final int activity_voice_recognition=0x7f0b0001;
    }
    public static final class string {
        public static final int app_name=0x7f080000;
        /**  voice 
         */
        public static final int btSpeak=0x7f080009;
        public static final int cancel=0x7f080008;
        public static final int etSearchHint=0x7f08000d;
        public static final int hello_world=0x7f080001;
        public static final int menu_settings=0x7f080002;
        public static final int picture=0x7f080003;
        public static final int sNoOfMatches=0x7f08000c;
        public static final int terms_close_btn=0x7f080007;
        public static final int terms_main_btn=0x7f080005;
        public static final int terms_main_desc=0x7f080004;
        public static final int terms_text=0x7f080006;
        public static final int title_activity_voice_recognition=0x7f08000a;
        public static final int tvTextMatches=0x7f08000b;
    }
    public static final class style {
        /** 
        Base application theme, dependent on API level. This theme is replaced
        by AppBaseTheme from res/values-vXX/styles.xml on newer devices.
    

            Theme customizations available in newer API levels can go in
            res/values-vXX/styles.xml, while customizations related to
            backward-compatibility can go here.
        

        Base application theme for API 11+. This theme completely replaces
        AppBaseTheme from res/values/styles.xml on API 11+ devices.
    
 API 11 theme customizations can go here. 

        Base application theme for API 14+. This theme completely replaces
        AppBaseTheme from BOTH res/values/styles.xml and
        res/values-v11/styles.xml on API 14+ devices.
    
 API 14 theme customizations can go here. 
         */
        public static final int AppBaseTheme=0x7f0a0000;
        /**  Application theme. 
 All customizations that are NOT specific to a particular API-level can go here. 
         */
        public static final int AppTheme=0x7f0a0001;
        public static final int CategoryButtonStyle=0x7f0a0004;
        /**  newsreader 
         */
        public static final int NewsReaderStyle=0x7f0a0002;
        public static final int NewsReaderStyle_NoActionBar=0x7f0a0003;
    }
    public static final class styleable {
        /** Attributes that can be used with a TwoWayAbsListView.
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #TwoWayAbsListView_cacheColorHint com.example.androidtest:cacheColorHint}</code></td><td> Indicates that this list will always be drawn on top of solid, single-color
             opaque background.</td></tr>
           <tr><td><code>{@link #TwoWayAbsListView_drawSelectorOnTop com.example.androidtest:drawSelectorOnTop}</code></td><td> When set to true, the selector will be drawn over the selected item.</td></tr>
           <tr><td><code>{@link #TwoWayAbsListView_listSelector com.example.androidtest:listSelector}</code></td><td> Drawable used to indicate the currently selected item in the list.</td></tr>
           <tr><td><code>{@link #TwoWayAbsListView_scrollDirectionLandscape com.example.androidtest:scrollDirectionLandscape}</code></td><td></td></tr>
           <tr><td><code>{@link #TwoWayAbsListView_scrollDirectionPortrait com.example.androidtest:scrollDirectionPortrait}</code></td><td> Use this attribute to control which direction the GridView scrolls when in
             portrait orientation </td></tr>
           <tr><td><code>{@link #TwoWayAbsListView_scrollingCache com.example.androidtest:scrollingCache}</code></td><td> When set to true, the list uses a drawing cache during scrolling.</td></tr>
           <tr><td><code>{@link #TwoWayAbsListView_smoothScrollbar com.example.androidtest:smoothScrollbar}</code></td><td> Enables the fast scroll thumb that can be dragged to quickly scroll through
             the list.</td></tr>
           <tr><td><code>{@link #TwoWayAbsListView_stackFromBottom com.example.androidtest:stackFromBottom}</code></td><td> Used by ListView and GridView to stack their content from the bottom.</td></tr>
           <tr><td><code>{@link #TwoWayAbsListView_transcriptMode com.example.androidtest:transcriptMode}</code></td><td> When set to true, the list will filter results as the user types.</td></tr>
           </table>
           @see #TwoWayAbsListView_cacheColorHint
           @see #TwoWayAbsListView_drawSelectorOnTop
           @see #TwoWayAbsListView_listSelector
           @see #TwoWayAbsListView_scrollDirectionLandscape
           @see #TwoWayAbsListView_scrollDirectionPortrait
           @see #TwoWayAbsListView_scrollingCache
           @see #TwoWayAbsListView_smoothScrollbar
           @see #TwoWayAbsListView_stackFromBottom
           @see #TwoWayAbsListView_transcriptMode
         */
        public static final int[] TwoWayAbsListView = {
            0x7f010002, 0x7f010003, 0x7f010004, 0x7f010005,
            0x7f010006, 0x7f010007, 0x7f010008, 0x7f010009,
            0x7f01000a
        };
        /**
          <p>
          @attr description
           Indicates that this list will always be drawn on top of solid, single-color
             opaque background. This allows the list to optimize drawing. 


          <p>Must be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This is a private symbol.
          @attr name android:cacheColorHint
        */
        public static final int TwoWayAbsListView_cacheColorHint = 5;
        /**
          <p>
          @attr description
           When set to true, the selector will be drawn over the selected item.
             Otherwise the selector is drawn behind the selected item. The default
             value is false. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This is a private symbol.
          @attr name android:drawSelectorOnTop
        */
        public static final int TwoWayAbsListView_drawSelectorOnTop = 1;
        /**
          <p>
          @attr description
           Drawable used to indicate the currently selected item in the list. 


          <p>May be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
<p>May be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
          <p>This is a private symbol.
          @attr name android:listSelector
        */
        public static final int TwoWayAbsListView_listSelector = 0;
        /**
          <p>This symbol is the offset where the {@link com.example.androidtest.R.attr#scrollDirectionLandscape}
          attribute's value can be found in the {@link #TwoWayAbsListView} array.


          <p>Must be one of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>vertical</code></td><td>0</td><td> Scroll up vertically. This is the default value. </td></tr>
<tr><td><code>horizontal</code></td><td>1</td><td> Scroll horizontally. </td></tr>
</table>
          @attr name android:scrollDirectionLandscape
        */
        public static final int TwoWayAbsListView_scrollDirectionLandscape = 8;
        /**
          <p>
          @attr description
           Use this attribute to control which direction the GridView scrolls when in
             portrait orientation 


          <p>Must be one of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>vertical</code></td><td>0</td><td> Scroll up vertically. This is the default value. </td></tr>
<tr><td><code>horizontal</code></td><td>1</td><td> Scroll horizontally. </td></tr>
</table>
          <p>This is a private symbol.
          @attr name android:scrollDirectionPortrait
        */
        public static final int TwoWayAbsListView_scrollDirectionPortrait = 7;
        /**
          <p>
          @attr description
           When set to true, the list uses a drawing cache during scrolling.
             This makes the rendering faster but uses more memory. The default
             value is true. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This is a private symbol.
          @attr name android:scrollingCache
        */
        public static final int TwoWayAbsListView_scrollingCache = 3;
        /**
          <p>
          @attr description
           Enables the fast scroll thumb that can be dragged to quickly scroll through
             the list. 
 <attr name="fastScrollEnabled" format="boolean" /> 
 When set to true, the list will use a more refined calculation
             method based on the pixels height of the items visible on screen. This
             property is set to true by default but should be set to false if your adapter
             will display items of varying heights. When this property is set to true and
             your adapter displays items of varying heights, the scrollbar thumb will
             change size as the user scrolls through the list. When set to fale, the list
             will use only the number of items in the adapter and the number of items visible
             on screen to determine the scrollbar's properties. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This is a private symbol.
          @attr name android:smoothScrollbar
        */
        public static final int TwoWayAbsListView_smoothScrollbar = 6;
        /**
          <p>
          @attr description
           Used by ListView and GridView to stack their content from the bottom. 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This is a private symbol.
          @attr name android:stackFromBottom
        */
        public static final int TwoWayAbsListView_stackFromBottom = 2;
        /**
          <p>
          @attr description
           When set to true, the list will filter results as the user types. The
             List's adapter must support the Filterable interface for this to work. 
 <attr name="textFilterEnabled" format="boolean" /> 
 Sets the transcript mode for the list. In transcript mode, the list
             scrolls to the bottom to make new items visible when they are added. 


          <p>Must be one of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>disabled</code></td><td>0</td><td> Disables transcript mode. This is the default value. </td></tr>
<tr><td><code>normal</code></td><td>1</td><td> The list will automatically scroll to the bottom when
                 a data set change notification is received and only if the last item is
                 already visible on screen. </td></tr>
<tr><td><code>alwaysScroll</code></td><td>2</td><td> The list will automatically scroll to the bottom, no matter what items
                 are currently visible. </td></tr>
</table>
          <p>This is a private symbol.
          @attr name android:transcriptMode
        */
        public static final int TwoWayAbsListView_transcriptMode = 4;
        /** Attributes that can be used with a TwoWayGridView.
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #TwoWayGridView_columnWidth com.example.androidtest:columnWidth}</code></td><td></td></tr>
           <tr><td><code>{@link #TwoWayGridView_gravity com.example.androidtest:gravity}</code></td><td> Specifies how to place the content of an object, both
         on the x- and y-axis, within the object itself.</td></tr>
           <tr><td><code>{@link #TwoWayGridView_horizontalSpacing com.example.androidtest:horizontalSpacing}</code></td><td></td></tr>
           <tr><td><code>{@link #TwoWayGridView_numColumns com.example.androidtest:numColumns}</code></td><td></td></tr>
           <tr><td><code>{@link #TwoWayGridView_numRows com.example.androidtest:numRows}</code></td><td></td></tr>
           <tr><td><code>{@link #TwoWayGridView_rowHeight com.example.androidtest:rowHeight}</code></td><td></td></tr>
           <tr><td><code>{@link #TwoWayGridView_stretchMode com.example.androidtest:stretchMode}</code></td><td></td></tr>
           <tr><td><code>{@link #TwoWayGridView_verticalSpacing com.example.androidtest:verticalSpacing}</code></td><td></td></tr>
           </table>
           @see #TwoWayGridView_columnWidth
           @see #TwoWayGridView_gravity
           @see #TwoWayGridView_horizontalSpacing
           @see #TwoWayGridView_numColumns
           @see #TwoWayGridView_numRows
           @see #TwoWayGridView_rowHeight
           @see #TwoWayGridView_stretchMode
           @see #TwoWayGridView_verticalSpacing
         */
        public static final int[] TwoWayGridView = {
            0x7f010000, 0x7f01000b, 0x7f01000c, 0x7f01000d,
            0x7f01000e, 0x7f01000f, 0x7f010010, 0x7f010011
        };
        /**
          <p>This symbol is the offset where the {@link com.example.androidtest.R.attr#columnWidth}
          attribute's value can be found in the {@link #TwoWayGridView} array.


          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          @attr name android:columnWidth
        */
        public static final int TwoWayGridView_columnWidth = 4;
        /**
          <p>
          @attr description
           Specifies how to place the content of an object, both
         on the x- and y-axis, within the object itself. 


          <p>Must be one or more (separated by '|') of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>top</code></td><td>0x30</td><td> Push object to the top of its container, not changing its size. </td></tr>
<tr><td><code>bottom</code></td><td>0x50</td><td> Push object to the bottom of its container, not changing its size. </td></tr>
<tr><td><code>left</code></td><td>0x03</td><td> Push object to the left of its container, not changing its size. </td></tr>
<tr><td><code>right</code></td><td>0x05</td><td> Push object to the right of its container, not changing its size. </td></tr>
<tr><td><code>center_vertical</code></td><td>0x10</td><td> Place object in the vertical center of its container, not changing its size. </td></tr>
<tr><td><code>fill_vertical</code></td><td>0x70</td><td> Grow the vertical size of the object if needed so it completely fills its container. </td></tr>
<tr><td><code>center_horizontal</code></td><td>0x01</td><td> Place object in the horizontal center of its container, not changing its size. </td></tr>
<tr><td><code>fill_horizontal</code></td><td>0x07</td><td> Grow the horizontal size of the object if needed so it completely fills its container. </td></tr>
<tr><td><code>center</code></td><td>0x11</td><td> Place the object in the center of its container in both the vertical and horizontal axis, not changing its size. </td></tr>
<tr><td><code>fill</code></td><td>0x77</td><td> Grow the horizontal and vertical size of the object if needed so it completely fills its container. </td></tr>
<tr><td><code>clip_vertical</code></td><td>0x80</td><td> Additional option that can be set to have the top and/or bottom edges of
             the child clipped to its container's bounds.
             The clip will be based on the vertical gravity: a top gravity will clip the bottom
             edge, a bottom gravity will clip the top edge, and neither will clip both edges. </td></tr>
<tr><td><code>clip_horizontal</code></td><td>0x08</td><td> Additional option that can be set to have the left and/or right edges of
             the child clipped to its container's bounds.
             The clip will be based on the horizontal gravity: a left gravity will clip the right
             edge, a right gravity will clip the left edge, and neither will clip both edges. </td></tr>
</table>
          <p>This is a private symbol.
          @attr name android:gravity
        */
        public static final int TwoWayGridView_gravity = 0;
        /**
          <p>This symbol is the offset where the {@link com.example.androidtest.R.attr#horizontalSpacing}
          attribute's value can be found in the {@link #TwoWayGridView} array.


          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          @attr name android:horizontalSpacing
        */
        public static final int TwoWayGridView_horizontalSpacing = 1;
        /**
          <p>This symbol is the offset where the {@link com.example.androidtest.R.attr#numColumns}
          attribute's value can be found in the {@link #TwoWayGridView} array.


          <p>May be an integer value, such as "<code>100</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
<p>May be one of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>auto_fit</code></td><td>-1</td><td></td></tr>
</table>
          @attr name android:numColumns
        */
        public static final int TwoWayGridView_numColumns = 6;
        /**
          <p>This symbol is the offset where the {@link com.example.androidtest.R.attr#numRows}
          attribute's value can be found in the {@link #TwoWayGridView} array.


          <p>May be an integer value, such as "<code>100</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
<p>May be one of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>auto_fit</code></td><td>-1</td><td></td></tr>
</table>
          @attr name android:numRows
        */
        public static final int TwoWayGridView_numRows = 7;
        /**
          <p>This symbol is the offset where the {@link com.example.androidtest.R.attr#rowHeight}
          attribute's value can be found in the {@link #TwoWayGridView} array.


          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          @attr name android:rowHeight
        */
        public static final int TwoWayGridView_rowHeight = 5;
        /**
          <p>This symbol is the offset where the {@link com.example.androidtest.R.attr#stretchMode}
          attribute's value can be found in the {@link #TwoWayGridView} array.


          <p>Must be one of the following constant values.</p>
<table>
<colgroup align="left" />
<colgroup align="left" />
<colgroup align="left" />
<tr><th>Constant</th><th>Value</th><th>Description</th></tr>
<tr><td><code>none</code></td><td>0</td><td></td></tr>
<tr><td><code>spacingWidth</code></td><td>1</td><td></td></tr>
<tr><td><code>columnWidth</code></td><td>2</td><td></td></tr>
<tr><td><code>spacingWidthUniform</code></td><td>3</td><td></td></tr>
</table>
          @attr name android:stretchMode
        */
        public static final int TwoWayGridView_stretchMode = 3;
        /**
          <p>This symbol is the offset where the {@link com.example.androidtest.R.attr#verticalSpacing}
          attribute's value can be found in the {@link #TwoWayGridView} array.


          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          @attr name android:verticalSpacing
        */
        public static final int TwoWayGridView_verticalSpacing = 2;
    };
}
